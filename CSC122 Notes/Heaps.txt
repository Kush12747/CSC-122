Heaps

//2 types of heaps which are
//min and max heaps
//can store heaps in arrays
//can't remove any data in a heap only the root

//the heap is a nlog(n)

//In an array implementation the left child of index p
 * would be at 2p+1 and p's right child would be at 2p+2.
 * The parent of c would be at (c-1)/2.  This assumes, of
 * course, that the heap is complete -- otherwise you'd end
 * up with gaps in your array

//Max-Heap: In a Max-Heap the key present at the root node must be greatest 
  among the keys present at all of it’s children. The same property must be 
  recursively true for all sub-trees in that Binary Tree.

//Min-Heap: In a Min-Heap the key present at the root node must be minimum 
  among the keys present at all of it’s children. The same property must be 
  recursively true for all sub-trees in that Binary Tree.

Heap sort is a fantastic application of heaps.  Just keep
 * in mind that to form a descending-like order -- largest
 * to smallest, you need a smallest heap and you'd use a
 * largest heap to form an ascending-like order -- smallest
 * to largest.  It is the exact opposite of what you'd
 * probably expect it to be.
----------------------------------------------------------------------------
Expression trees

A tree is the perfect way to store an algebraic expression!
 *
 * The precedence of operations is represented physically by the parent-child
 * relationships of the nodes (a higher precedence operation is the child of a
 * lower precedence operation -- freaky, no?).

3x + 2^y	(+)
	       /   \
	     (*)   (^)
	     / \   / \
           (3) (x)(z)(y)
---------------------------------------------------------------------------
// C++ program for expression tree
#include<bits/stdc++.h>
using namespace std;
 
// An expression tree node
struct et
{
    char value;
    et* left, *right;
};
 
// A utility function to check if 'c'
// is an operator
bool isOperator(char c)
{
    if (c == '+' || c == '-' ||
            c == '*' || c == '/' ||
            c == '^')
        return true;
    return false;
}
 
// Utility function to do inorder traversal
void inorder(et *t)
{
    if(t)
    {
        inorder(t->left);
        printf("%c ", t->value);
        inorder(t->right);
    }
}
 
// A utility function to create a new node
et* newNode(char v)
{
    et *temp = new et;
    temp->left = temp->right = NULL;
    temp->value = v;
    return temp;
};
 
// Returns root of constructed tree for given
// postfix expression
et* constructTree(char postfix[])
{
    stack<et *> st;
    et *t, *t1, *t2;
 
    // Traverse through every character of
    // input expression
    for (int i=0; i<strlen(postfix); i++)
    {
        // If operand, simply push into stack
        if (!isOperator(postfix[i]))
        {
            t = newNode(postfix[i]);
            st.push(t);
        }
        else // operator
        {
            t = newNode(postfix[i]);
 
            // Pop two top nodes
            t1 = st.top(); // Store top
            st.pop();      // Remove top
            t2 = st.top();
            st.pop();
 
            //  make them children
            t->right = t1;
            t->left = t2;
 
            // Add this subexpression to stack
            st.push(t);
        }
    }
 
    //  only element will be root of expression
    // tree
    t = st.top();
    st.pop();
 
    return t;
}
 
// Driver program to test above
int main()
{
    char postfix[] = "ab+ef*g*-";
    et* r = constructTree(postfix);
    printf("infix expression is \n");
  



















